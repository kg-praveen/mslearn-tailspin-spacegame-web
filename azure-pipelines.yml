trigger:
- '*'

pool:
  name: 'MyAgentPool'
  # Remove demands; we'll install Node in-job to avoid capability mismatches
  # demands:
  # - npm

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '8.x'   # use .NET 8 SDK

steps:
# .NET 8 SDK for this job
- task: UseDotNet@2
  displayName: 'Use .NET SDK $(dotnetSdkVersion)'
  inputs:
    packageType: 'sdk'
    version: '$(dotnetSdkVersion)'
    includePreview: false

- script: dotnet --info
  displayName: 'Dotnet info (sanity check)'

# Install Node 14 (bypasses agent "npm" demands)
- task: NodeTool@0
  displayName: 'Use Node.js 14.x'
  inputs:
    versionSpec: '14.x'


# Install web deps in the web project folder
- task: Npm@1
  displayName: 'npm ci'
  inputs:
    command: 'ci'
    workingDir: 'Tailspin.SpaceGame.Web'
    verbose: false

# Compile Sass with dart-sass (pure JS; no native build woes)
- script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
  displayName: 'Compile Sass assets'


# Run gulp tasks if you use gulpfile.js (ensure devDependencies include gulp)
- task: Gulp@1
  displayName: 'Run gulp tasks'
  inputs:
    gulpFile: 'gulpfile.js'     # or 'gulpfile.cjs' if thatâ€™s your file
    cwd: 'Tailspin.SpaceGame.Web'

# Build info into wwwroot
- script: |
    echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt
  displayName: 'Write build info'
  workingDirectory: '$(wwwrootDir)'

# Restore, Build, Publish (.NET 8 now active)
- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build - $(buildConfiguration)'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--no-restore --configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Publish - $(buildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
  condition: succeeded()
